#!/usr/bin/env python
'''
  Create/Update Elastic BeanStalk Environment.
  Support deploy different version of application and configuration.


  Usage example
  chmod +x make_environment.py
  ./create_beanstalk_resources.py --application "app-name" --deploymentrole "aws iam deployment role"
    --region "eu-west-1"
'''

import argparse
import json

parser = argparse.ArgumentParser(description='Process Arguments.')
parser.add_argument('--eventsTargetFile', type=str, required=True, dest='events_target_file')
parser.add_argument('--env', type=str, required=True, dest='env')
parser.add_argument('--deploymentAccount', type=str, required=True, dest='deployment_account')
parser.add_argument('--taskArn', type=str, required=True, dest='task_arn')


# TODO: rework this entire script into the ECS script
def __schedule_a_target(target_defs):
    print "Creating a cloudwatch rule... "

    cw_client = session.current.client('events')

    try:
        response = cw_client.put_rule(
            Name=target_defs['Rule'],
            ScheduleExpression="cron(" + target_defs['Schedule'] + ")",
            State='ENABLED',
            Description='Rule generated by <project-name> Automation Layer'
        )

        response = cw_client.put_targets(
            Rule=target_defs['Rule'],
            Targets=target_defs['Targets']
        )

        print(json.dumps(response, indent=4, sort_keys=False))
    except Exception as e:
        raise EnvironmentError("Failed cloudwatch put target {}".format(e.message))


if __name__ == '__main__' and __package__ is None:
    from os import sys, path

    sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))
    from py.core.session import Session
    from py.core.config import Config
    from py.core.exports import Exports
    from py.core.utils import read_template

    args = parser.parse_args()

    session = Session.factory()
    config = Config(Exports(session))

    config.load_resource_config(res_conf_file=args.events_target_file,
                                substitutions={
                                    "env": args.env,
                                    "deployment_account": args.deployment_account,
                                    "task_arn": args.task_arn
                                })
    raw_target_defs = read_template(args.events_target_file)

    target_defs = sub_tokens_json(raw_target_defs, )

    cf_exports = extract_exports(session)

    swap_exports(all_export_names=cf_exports, current_option=target_defs)

    # print(json.dumps(target_defs, indent=4, sort_keys=False))

    __schedule_a_target(target_defs)
